#!/bin/bash
#
# this script simplifies and beautifies the output of the youtube-dl
# package, for my own personal benefit and uses
#
# it also requires the expect package, to unbuffer the output of
# youtube-dl for real-time feedback
#
# on next revision, I'm going to encorporate a function to intuitively
# ID3 tag the downloaded mp3s
#

# config
PLAYLISTS=("http://www.youtube.com/playlist?list=PLc69xk-pOevgMEx6ZsjYgJy1MUwbNT0f_" \
           "http://www.youtube.com/playlist?list=PLc69xk-pOevgWY6CY545nOZX1KOer780z")
           
DESTINATION="~/music/YouTube/%(playlist)s/%(title)s.%(ext)s"
ARCHIVE="~/music/YouTube/.archive"

# criteria of which lines to print, accomplished via awk
LINES_ALLOWED="/^\[download\]/ && \$2 ~ /Downloading/ && \$3 ~ /video/; \
               /^\[download\]/ && \$2 ~ /[0-9]*\.[0-9]*\%/ && \$3 ~ /of/ && \$5 ~ /at/; \
               /^\[download\]/ && \$2 ~ /100\%/ && \$3 ~ /of/ && \$5 ~ /in/; \
               /^\[download\]/ && / has already been recorded in archive$/; \
               /^\[download\]/ && \$2 ~ /Destination:/; \
               /^\[download\]/ && \$2 ~ /Downloading/ && \$3 ~ /playlist:/; \
               /^\[download\]/ && \$2 ~ /Finished/ && \$3 ~ /downloading/ && \$4 ~ /playlist:/; \
               /^ERROR: /"

# colors
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
BLUE=$(tput setaf 4)
MAGENTA=$(tput setaf 5)
NC=$(tput sgr0) # No Color

# used in stylizing lines of output
PRE=$(echo -n '* '; tput bold) # general
PREX=$(echo -n '! '; tput bold) # errors and exclamations
PRED=$(echo -n 'â†“ '; tput bold) # downloads
PREHF=$(echo -n '< '; tput bold) # headers and footers
POST=$(tput sgr0) # reset/clear

# determine the total number of playlists we specified
LENGTH=${#PLAYLISTS[@]}

# sed pattern to strip color codes, as to not interfere with our work
STRIPPER="s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[mGK]//g"

# cycle through the playlists, downloading each
for ((i=0;i<$LENGTH;i++)); do
    # unbuffer and begin running youtube-dl, configured to use ffmpeg and
    # output to mp3 format
    # also strip codes with sed, then use awk to only allow desired lines
    unbuffer -p youtube-dl --prefer-ffmpeg --newline -i -x --audio-format mp3 --audio-quality 0 -o "${DESTINATION}" --download-archive "${ARCHIVE}" "${PLAYLISTS[$i]}" | \
    unbuffer -p sed -r "${STRIPPER}" | \
    unbuffer -p awk "${LINES_ALLOWED}" | \
    while read LINE
    do
        # strip now undesired line prefixes and what-not
        LINE="$(echo ${LINE} | sed -r 's:\[download\] ::;s/webm/mp3/g;s/m4a/mp3/g')"
        
        # start formatting and printing our different types of output
        if [[ $LINE =~ ^Downloading\ playlist\:\ .* || $LINE =~ ^Finished\ downloading\ playlist\:\ .* ]]; then
            # headers/footers (of sorts)
            printf '%s' "${PREHF}${YELLOW}${LINE}" | unbuffer -p sed "s/$/${POST} >/"
        elif [[ $LINE =~ ^ERROR\:\ .* ]]; then
            # errors
            printf '%s\n' "  ${PREX}${RED}${LINE}${POST}"
        elif [[ $LINE =~ .*\ has\ already\ been\ recorded\ in\ archive.$ ]]; then
            # archive notices
            printf '%s\n' "  ${PREX}${MAGENTA}${LINE}${POST}"
        elif [[ $LINE =~ ^[0-9]*\.[0-9]*\%\ of\ .* ]]; then
            # download percent progress counter
            # -- doesn't print a new line with each upward tick, but
            # instead clears and reuses same line
            echo -ne "\033[0K\r"
            printf '%s' "  ${PRED}${GREEN}${LINE}${POST}"
        elif [[ $LINE =~ ^100\%\ of\ .* ]]; then
            # completed download time
            # -- does print a new line!
            echo -ne "\033[0K\r"
            printf '%s\n' "  ${PRED}${GREEN}${LINE}${POST}"
        else
            # everything else
            printf '%s\n' "  ${PRE}${BLUE}${LINE}${POST}"
        fi
    done
done
